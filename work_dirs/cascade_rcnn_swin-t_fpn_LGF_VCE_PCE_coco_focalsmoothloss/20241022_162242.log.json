{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA RTX A6000\nCUDA_HOME: /usr/local/cuda-12.2\nNVCC: Cuda compilation tools, release 12.2, V12.2.140\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.10.0\nMMCV: 1.7.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.1+HEAD", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 6, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead_LGF',\n        num_stages=3,\n        stage_loss_weights=[1, 1, 0.5],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared3FCBBoxHead_with_BboxEncoding',\n                in_channels=256,\n                fc_out_channels=1024,\n                bbox_encoding_dim=512,\n                roi_feat_size=7,\n                num_classes=18,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(type='FocalLoss'),\n                loss_bbox=dict(\n                    type='BalancedL1Loss', beta=1.0, loss_weight=1.0)),\n            dict(\n                type='Shared3FCBBoxHead_with_BboxEncoding',\n                in_channels=256,\n                fc_out_channels=1024,\n                bbox_encoding_dim=512,\n                roi_feat_size=7,\n                num_classes=18,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(type='FocalLoss'),\n                loss_bbox=dict(\n                    type='BalancedL1Loss', beta=1.0, loss_weight=1.0)),\n            dict(\n                type='Shared3FCBBoxHead_with_BboxEncoding',\n                in_channels=256,\n                fc_out_channels=1024,\n                bbox_encoding_dim=512,\n                roi_feat_size=7,\n                num_classes=18,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(type='FocalLoss'),\n                loss_bbox=dict(\n                    type='BalancedL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        localglobal_fuser=dict(\n            type='LocalGlobal_Context_Fuser',\n            channels=256,\n            roi_size=7,\n            reduced_channels=256,\n            lg_merge_layer=dict(type='SELayer', channels=256)),\n        lgf_shared=False,\n        bbox_encoder=dict(\n            type='BboxEncoder',\n            n_layer=4,\n            n_head=4,\n            n_embd=512,\n            bbox_cord_dim=4,\n            bbox_max_num=1024,\n            embd_pdrop=0.1,\n            attn_pdrop=0.1),\n        bbox_encoder_shared=False),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.0,\n            nms=dict(type='nms', iou_threshold=0.7),\n            max_per_img=200)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[216.45, 212.36, 206.76], std=[55.82, 56.04, 55.56], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),\n                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),\n                          (736, 1333), (768, 1333), (800, 1333)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type': 'Resize',\n                      'img_scale': [(400, 1333), (500, 1333), (600, 1333)],\n                      'multiscale_mode': 'value',\n                      'keep_ratio': True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (384, 600),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                    (576, 1333), (608, 1333), (640, 1333),\n                                    (672, 1333), (704, 1333), (736, 1333),\n                                    (768, 1333), (800, 1333)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }, {\n                      'type': 'PhotoMetricDistortion',\n                      'brightness_delta': 32,\n                      'contrast_range': (0.5, 1.5),\n                      'saturation_range': (0.5, 1.5),\n                      'hue_delta': 18\n                  }, {\n                      'type': 'MinIoURandomCrop',\n                      'min_ious': (0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                      'min_crop_size': 0.3\n                  }, {\n                      'type':\n                      'CutOut',\n                      'n_holes': (5, 10),\n                      'cutout_shape': [(4, 4), (4, 8), (8, 4), (8, 8),\n                                       (16, 32), (32, 16), (32, 32), (32, 48),\n                                       (48, 32), (48, 48)]\n                  }]]),\n    dict(type='RandomFlip', flip_ratio=0.1),\n    dict(\n        type='Normalize',\n        mean=[216.45, 212.36, 206.76],\n        std=[55.82, 56.04, 55.56],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[216.45, 212.36, 206.76],\n                std=[55.82, 56.04, 55.56],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=3,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='./data/pmc_2022/pmc_coco/element_detection/train.json',\n        img_prefix='./data/pmc_2022/pmc_coco/element_detection/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type':\n                    'Resize',\n                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                  (576, 1333), (608, 1333), (640, 1333),\n                                  (672, 1333), (704, 1333), (736, 1333),\n                                  (768, 1333), (800, 1333)],\n                    'multiscale_mode':\n                    'value',\n                    'keep_ratio':\n                    True\n                }],\n                          [{\n                              'type': 'Resize',\n                              'img_scale': [(400, 1333), (500, 1333),\n                                            (600, 1333)],\n                              'multiscale_mode': 'value',\n                              'keep_ratio': True\n                          }, {\n                              'type': 'RandomCrop',\n                              'crop_type': 'absolute_range',\n                              'crop_size': (384, 600),\n                              'allow_negative_crop': True\n                          }, {\n                              'type':\n                              'Resize',\n                              'img_scale': [(480, 1333), (512, 1333),\n                                            (544, 1333), (576, 1333),\n                                            (608, 1333), (640, 1333),\n                                            (672, 1333), (704, 1333),\n                                            (736, 1333), (768, 1333),\n                                            (800, 1333)],\n                              'multiscale_mode':\n                              'value',\n                              'override':\n                              True,\n                              'keep_ratio':\n                              True\n                          }, {\n                              'type': 'PhotoMetricDistortion',\n                              'brightness_delta': 32,\n                              'contrast_range': (0.5, 1.5),\n                              'saturation_range': (0.5, 1.5),\n                              'hue_delta': 18\n                          }, {\n                              'type': 'MinIoURandomCrop',\n                              'min_ious': (0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                              'min_crop_size': 0.3\n                          }, {\n                              'type':\n                              'CutOut',\n                              'n_holes': (5, 10),\n                              'cutout_shape': [(4, 4), (4, 8), (8, 4), (8, 8),\n                                               (16, 32), (32, 16), (32, 32),\n                                               (32, 48), (48, 32), (48, 48)]\n                          }]]),\n            dict(type='RandomFlip', flip_ratio=0.1),\n            dict(\n                type='Normalize',\n                mean=[216.45, 212.36, 206.76],\n                std=[55.82, 56.04, 55.56],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=[\n            'x_title', 'y_title', 'plot_area', 'other', 'xlabel', 'ylabel',\n            'chart_title', 'x_tick', 'y_tick', 'legend_patch', 'legend_label',\n            'legend_title', 'legend_area', 'mark_label', 'value_label',\n            'y_axis_area', 'x_axis_area', 'tick_grouping'\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./data/pmc_2022/pmc_coco/element_detection/val.json',\n        img_prefix='./data/pmc_2022/pmc_coco/element_detection/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=[\n            'x_title', 'y_title', 'plot_area', 'other', 'xlabel', 'ylabel',\n            'chart_title', 'x_tick', 'y_tick', 'legend_patch', 'legend_label',\n            'legend_title', 'legend_area', 'mark_label', 'value_label',\n            'y_axis_area', 'x_axis_area', 'tick_grouping'\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./data/pmc_2022/pmc_coco/element_detection/split3_test.json',\n        img_prefix='./data/pmc_2022/pmc_coco/element_detection/split3_test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=[\n            'x_title', 'y_title', 'plot_area', 'other', 'xlabel', 'ylabel',\n            'chart_title', 'x_tick', 'y_tick', 'legend_patch', 'legend_label',\n            'legend_title', 'legend_area', 'mark_label', 'value_label',\n            'y_axis_area', 'x_axis_area', 'tick_grouping'\n        ]))\nevaluation = dict(interval=1, metric=['bbox'])\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=150)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nclasses = [\n    'x_title', 'y_title', 'plot_area', 'other', 'xlabel', 'ylabel',\n    'chart_title', 'x_tick', 'y_tick', 'legend_patch', 'legend_label',\n    'legend_title', 'legend_area', 'mark_label', 'value_label', 'y_axis_area',\n    'x_axis_area', 'tick_grouping'\n]\nauto_resume = False\ngpu_ids = [0]\nwork_dir = './work_dirs/cascade_rcnn_swin-t_fpn_LGF_VCE_PCE_coco_focalsmoothloss'\n", "seed": 1455491102, "exp_name": "cascade_rcnn_swin-t_fpn_LGF_VCE_PCE_coco_focalsmoothloss.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 2e-05, "memory": 14894, "data_time": 0.08436, "loss_rpn_cls": 0.63433, "loss_rpn_bbox": 0.26069, "s0.loss_cls": 1.39245, "s0.acc": 69.44401, "s0.loss_bbox": 0.24059, "s1.loss_cls": 1.41205, "s1.acc": 76.84635, "s1.loss_bbox": 0.14447, "s2.loss_cls": 0.68083, "s2.acc": 89.5612, "s2.loss_bbox": 0.02127, "loss": 4.7867, "time": 1.46457}
